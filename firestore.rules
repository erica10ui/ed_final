rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // TEMPORARY: Allow all reads and writes for testing
    // TODO: Replace with proper security rules before production
    match /{document=**} {
      allow read, write: if true;
    }
    
    // Original secure rules (commented out for testing)
    /*
    // Users can only access their own data
    match /users/{userId} {
      // Allow read/write access to user's own document (including anonymous users)
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Journal entries subcollection
      match /journalEntries/{entryId} {
        // Users can only access their own journal entries
        allow read, write: if request.auth != null && request.auth.uid == userId;
        
        // Validate data structure for journal entries
        allow create: if request.auth != null 
          && request.auth.uid == userId
          && validateJournalEntry(request.resource.data);
        
        allow update: if request.auth != null 
          && request.auth.uid == userId
          && validateJournalEntryUpdate(request.resource.data);
      }
    }
    */
    
    // Helper function to validate journal entry data
    function validateJournalEntry(data) {
      return data.keys().hasAll(['title', 'description', 'mood', 'sleepQuality', 'createdAt', 'updatedAt', 'userId'])
        && data.title is string
        && data.description is string
        && data.mood is string
        && data.sleepQuality is string
        && data.createdAt is timestamp
        && data.updatedAt is timestamp
        && data.userId is string
        && data.userId == request.auth.uid
        && data.title.size() > 0
        && data.description.size() > 0
        && data.title.size() <= 200
        && data.description.size() <= 5000
        && data.mood in ['ðŸ˜Š', 'ðŸ˜Œ', 'ðŸ˜´', 'ðŸ˜°', 'ðŸ˜¤', 'ðŸ˜¢', 'ðŸ˜¡', 'ðŸ¤”']
        && data.sleepQuality in ['Poor', 'Fair', 'Good', 'Great', 'Excellent']
        && (data.tags == null || (data.tags is list && data.tags.size() <= 10))
        && (data.date == null || data.date is string);
    }
    
    // Helper function to validate journal entry updates
    function validateJournalEntryUpdate(data) {
      return data.keys().hasAll(['updatedAt'])
        && data.updatedAt is timestamp
        && (data.title == null || (data.title is string && data.title.size() > 0 && data.title.size() <= 200))
        && (data.description == null || (data.description is string && data.description.size() > 0 && data.description.size() <= 5000))
        && (data.mood == null || data.mood in ['ðŸ˜Š', 'ðŸ˜Œ', 'ðŸ˜´', 'ðŸ˜°', 'ðŸ˜¤', 'ðŸ˜¢', 'ðŸ˜¡', 'ðŸ¤”'])
        && (data.sleepQuality == null || data.sleepQuality in ['Poor', 'Fair', 'Good', 'Great', 'Excellent'])
        && (data.tags == null || (data.tags is list && data.tags.size() <= 10))
        && (data.userId == null || data.userId == request.auth.uid);
    }
  }
}
